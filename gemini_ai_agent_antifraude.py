import os
import streamlit as st

from google import genai
from google.adk.agents import Agent
from google.adk.runners import Runner
from google.adk.sessions import InMemorySessionService
from google.adk.tools import google_search
from google.genai import types  # Para criar conte√∫dos (Content e Part)
from datetime import date
import textwrap # Para formatar melhor a sa√≠da de texto
import requests # Para fazer requisi√ß√µes HTTP

GOOGLE_API_KEY = st.secrets["GOOGLE_API_KEY"] 

# Configura o cliente da SDK do Gemini
client = genai.Client()
MODEL_ID = "gemini-2.0-flash"
# Cria um servi√ßo de sess√£o em mem√≥ria
session_service = InMemorySessionService()

# Fun√ß√£o auxiliar que envia uma mensagem para um agente via Runner e retorna a resposta final
async def call_agent(agent: Agent, message_text: str) -> str:
   
    # Cria uma nova sess√£o (voc√™ pode personalizar os IDs conforme necess√°rio)
    session = await session_service.create_session(app_name=agent.name, user_id="user1", session_id="session1")
    # Cria um Runner para o agente
    runner = Runner(agent=agent, app_name=agent.name, session_service=session_service)
    # Cria o conte√∫do da mensagem de entrada
    content = types.Content(role="user", parts=[types.Part(text=message_text)])

    final_response = ""
    # Itera assincronamente pelos eventos retornados durante a execu√ß√£o do agente
    for event in runner.run_async(user_id="user1", session_id="session1", new_message=content):
        if event.is_final_response():
          for part in event.content.parts:
            if part.text is not None:
              final_response += part.text
              final_response += "\n"
    return final_response

# Fun√ß√£o auxiliar para exibir texto formatado em Markdown no Colab
def to_markdown(text):
  text = text.replace('‚Ä¢', '  *')
  return Markdown(textwrap.indent(text, '> ', predicate=lambda _: True))

##########################################
# --- Agente 1: Agente Principal: Classificador de fraudes (CORE-ANTIFRAUD) --- #
##########################################

async def agente_core_antifraud(topico):

    core_antifraud = Agent(
        name="agente_core_antifraude",
        model="gemini-2.0-flash",
        instruction="""
        Voc√™ √© um assistente especialista em anti fraudes. A sua tarefa √© avaliar o t√≥pico e determimnar se h√° ind√≠cios de padr√µes de golpes e engenharia social sendo aplicada no t√≥pico.
        Ap√≥s essa an√°lise, gere um relat√≥rio sobre o counte√∫do e sua conclus√£o, como golpe prov√°vel, suspeito, seguro ou indeterminado.
        Detecte padr√µes lingu√≠sticos t√≠picos de engenharia social (urg√™ncia, medo, recompensa f√°cil, prazo final, voc√™ ganhou). Avalie o tom emocional/manipulativo.
        Junto do seu relat√≥rio final deve constar um prompt que ser√° enviado para um agente de intelig√™ncia artificial que far√° buscas sobre golpes similares na internet,
        este prompt final deve ser trabalhdo para que a busca na internet retorne resultados relevantes e com casos similares de golpes,
        anexe ao prompt a mensagem principal da fraude, com textos mais suspeitos, url, links, e-mails, n√∫meros de telefones, cpf, cnpj, dom√≠nios, redes sociais caso sejam informados.
        """,
        description="Agente CORE-ANTIFRAUD, que avalia o texto em busca de padr√¥es de fraude e engenharia social",
        tools=[google_search]
    )

    entrada_do_agente_core_antifraud = f"T√≥pico: {topico}"

    lancamentos = await call_agent(core_antifraud, entrada_do_agente_core_antifraud)
    return lancamentos

################################################
# --- Agente 2: Especialista em buscas na internet --- #
################################################

async def agente_buscador(topico, lancamentos_buscados):
    buscador = Agent(
        name="agente_buscador",
        model="gemini-2.0-flash",
        # Inserir as instru√ß√µes do Agente Planejador #################################################
        instruction="""
        Voc√™ √© um especialista em investiga√ß√£o com forte expertise em consultas de golpes e fraudes em geral, voc√™ deve:
        usar a ferramenta de busca do Google (google_search) para identificar golpes similares ao proposto no t√≥pico,
        Voc√™ tamb√©m pode usar o (google_search) para encontrar mais informa√ß√µes sobre os temas e aprofundar.

        consultandos sites sobre fraudes, golpes, banco de dados de phishing, malwares, servi√ßos como virustotal, google safe browsing,
        abuseipdb e servi√ßos similares. verifique se as url, links, e-mails, n√∫meros de telefones, cpf, cnpj, dom√≠nios, redes sociais, caso sejam informados no t√≥pico, s√£o suspeitos ou maliciosos.
        Aponte falsifica√ß√µes, dom√≠nios parecidos, e-mails spoofados. analise f√≥runs, sites de reclam√ß√µes, redes sociais.

        Ao final, voc√™ ir√° escolher os temas mais relevante e similares ao t√≥pico com base nas suas pesquisas
        e retornar esses temas, seus pontos mais relevantes, e um plano com os assuntos
        a serem abordados no post que ser√° escrito posteriormente. Fa√ßa um resumo do t√≥pico com sua an√°lise.
        Este texto final deve conter um prompt que ser√° enviado para um agente de intelig√™ncia artificial que far√° far√° uma an√°lise contextual do seu texto final.
        """,
        description="Agente especialista em busca de internet",
        tools=[google_search]
    )

    entrada_do_agente_buscador = f"T√≥pico:{topico}\nLan√ßamentos buscados: {lancamentos_buscados}"
    # Executa o agente
    busca_result = await call_agent(buscador, entrada_do_agente_buscador)
    return busca_result

################################################
# --- Agente 2: Contextual --- #
################################################

async def agente_contextual(topico, busca_result):
    contextual = Agent(
        name="agente_buscador",
        model="gemini-2.0-flash",
        # Inserir as instru√ß√µes do Agente Planejador #################################################
        instruction="""
        Voc√™ √© um especialista em investiga√ß√£o com forte expertise em consultas de golpes e fraudes em geral,
        o t√≥pico em quest√£o √© resultado de um trabalho de investiga√ß√£o de um agente de intelig√™ncia artificial especialista em investiga√ß√£o de golpes e fraudes,
        voc√™ deve:
        analisar o t√≥pico em busca de padr√µes de fraudes e golpes, comparando o conte√∫do com padr√µes legais ou pr√°ticas leg√≠timas:

        ####

        exemplos:
        Ofertas de trabalhos n√£o solicitadas com sal√°rios irreais.
        Pedidos de pagamentos antecipados por "taxasa administrativas".
        Empr√©stimos que exigem dep√≥sito pr√©vio.

        Analise o t√≥pico e verifique se o mesmo se encaixa em uma tentativa de golpe e fa√ßa uma conclus√£o se o mesmo √© um golpe prov√°vel, suspeito, seguro ou indeterminado.
        """,
        description="Agente especialista em busca de internet",
        tools=[google_search]
    )

    entrada_do_agente_contextual = f"T√≥pico:{topico}\nResultados buscados: {busca_result}"
    # Executa o agente
    final_result = await call_agent(contextual, entrada_do_agente_contextual)
    return final_result

st.title("ü§ñ Gemini Fraud Detector Chatbot")
st.subheader("Cole ou digite a mensagem que voc√™ deseja verificar:")

# √Årea para o usu√°rio inserir a mensagem
user_message = st.text_area("Mensagem:", height=200)

if st.button("Analisar Mensagem"):
    if user_message:
        st.markdown("---")
        st.subheader("An√°lise da Mensagem:")

        # --- Agente de An√°lise Lingu√≠stica ---
        with st.spinner("Analisando padr√µes lingu√≠sticos..."):
            result_agent_core_antifraud = agente_core_antifraud(user_message)
            print(result_agent_core_antifraud)
            st.markdown("#### Agente de An√°lise Lingu√≠stica:")
            st.markdown(result_agent_core_antifraud)
            st.info(result_agent_core_antifraud)
            st.markdown("---")

        # --- Agente Especialista em Busca de Golpes ---
        with st.spinner("Buscando informa√ß√µes relevantes..."):
            result_agent_buscador = agente_buscador(user_message, result_agent_core_antifraud)
            st.markdown("#### Agente Especialista em Busca de Golpes:")
            if result_agent_buscador:
                for i, result in enumerate(result_agent_buscador):
                    st.markdown(f"**Resultado {i+1}:**")
                    st.write(result) # Ajuste como voc√™ exibe os resultados da busca
            else:
                st.warning("Nenhum resultado de busca relevante encontrado.")
            st.markdown("---")
            
        # --- Agente Contextual ---
        with st.spinner("Contextualizando as informa√ß√µes..."):
            result_agent_contextual = agente_contextual(user_message, result_agent_buscador)

            st.markdown("#### Agente Contextual:")
            if "probabilidade" in result_agent_contextual.lower(): # Exemplo de como destacar a conclus√£o
                if "alta" in result_agent_contextual.lower():
                    st.error(result_agent_contextual)
                elif "baixa" in result_agent_contextual.lower():
                    st.success(result_agent_contextual)
                else:
                    st.warning(result_agent_contextual)
            else:
                st.info(result_agent_contextual)
            st.markdown("---")
    else:
        st.warning("Por favor, digite ou cole uma mensagem para an√°lise.")
